env:
 matrix:
  include:
    - os: osx
      osx_image: xcode11
      language: node_js
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
        - NODE_ENV=dev

    - os: linux
      language: node_js
      services:
        - xvfb
      env:
        - NODE_ENV=dev
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-multilib
            - g++-8
            - g++-multilib
            - icnsutils
            - graphicsmagick
            - xz-utils
            - xorriso
            - rpm

    - os: windows
      language: node_js
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
        - NODE_ENV=dev
        - YARN_GPG=no # otherwise this starts gpg-agent that never exits


before_cache:
  - rm -rf $HOME/.cache/electron-builder/wine

cache:
  yarn: true
  directories:
    - node_modules
    - $(npm config get prefix)/lib/node_modules
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder

install:
  - travis_wait 30 yarn --ignore-engines --network-timeout 800000;
  # Change vars for windows signing
  - export CSC_IDENTITY_AUTO_DISCOVERY=true
  # On Linux, initialize "virtual display". See before_script


before_script:
  # osx set window size
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080;
    fi
  # On Linux, create a "virtual display". This allows browsers to work properly
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99.0; fi


script:
# update the xdg implementation on the machine. older version is buggy
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cp node_modules/open/xdg-open ~/bin/;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then xdg-open --version;
    fi
  - yarn lint --quiet
  - travis_retry yarn run test-peruse --forceExit
  - travis_retry yarn run test-exts --forceExit
  # disable signging on windows for now.
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then unset CSC_LINK || unset CSC_KEY_PASSWORD; fi
  - yarn package
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/peruse.spec.ts
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/navigation.spec.ts
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/settingsMenu.spec.ts


after_failure:
# - cat ~/.local/share/applications/mimeapps.list
- which xdg-open
- xdg-open --version
# - cat $TMPDIR/safe-browser.log;
# check resolution...
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then  system_profiler SPDisplaysDataType | grep Resolution
  fi


before_deploy:
- NODE_ENV=prod yarn deploy
- cd release;
- |
  ls . | grep safe | while read RELEASE; do
  echo "deploying ${RELEASE} to GitHub releases as tagged with ${TRAVIS_TAG}";
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ditto -c -k --sequesterRsrc --keepParent ${RELEASE} ${RELEASE}.zip;
  fi
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then zip -r -q ${RELEASE}.zip ${RELEASE};
  fi
  done
# don't fail if nothing to do.
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then zip -d *.zip *.DS_Store && zip -d *.zip  __MACOSX/\* || true;
  fi
- cd ..
- ls release
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export RELEASE_PROD_EXE="$(ls release/*-mac-x64.dmg)";
  fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export RELEASE_PROD_EXE="$(ls release/*-linux-x64.AppImage)";
  fi
- echo "deploying ${RELEASE_PROD_EXE} to GitHub releases as tagged with ${TRAVIS_TAG}"
- ls release

deploy:
  provider: releases
  skip_cleanup: true
  api_key: $GITHUB_ACCESS_TOKEN
  file: $RELEASE_PROD_EXE
  draft: true
  tag_name: $TRAVIS_TAG
  on:
    tags: true
    branch: dev
