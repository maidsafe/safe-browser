env:
  global:
    - secure: "sDQ/Ai7CWofxj203YwmMQhGlfDhCnDQn8ti3rTPk9tVxbqR8uYYbSBJw46xxdzcVfwCXN6z+6ZG1Xp9DXYSn5tGMW+JiSMY0gaSI0/fuL3GqBlOGRMCljJEQNb8dHeXjVqbWfviymx5QT8ATF4xRR9jslLLAQkiqFqqNanB6A2pAZqYo9OVWg8+K5wN+/kpKevYkMFw0Bg2bZxVte8r/TTMN6aHmy8uCFCZ1jdjdZquaG/qu89jwFDriJXGUFqzyqa+j1Lp2HDEf9FsaapXLzrj3q6H7ykfYYoFcHo/6MO46YGBFvbyd0yFy4Ipca+gRUR6p4U74+rL0BQfj5JfM0Ekjnz9KwvbGH178oY02CN2KG+OeLkRpaom94ncibZR7WvbBi050EZpkbpqW9H9e5UqQQI3wL+YqWjD6rqjA2L5MxBSSi5Na3L7m2UdXlXQd7yBQK9uCywcCpHWoihNLC8GJ1DVD2EUBReW0YQatBdmlsP8XoElOngILA72+p7bjJ5aJugxSc1gZejy4P0suYVSdYm1k6+Og0PojH38gaqWunOCA+fb5bxGIsB/dFfTkEzp/G/NGNl6b8KwTXCCbS5E6qWI0/NHinCLGNQoovEgFwdVjF6+zOmroCwSSx23xgG1Fr1TY4GIcw1Td73ibGtJU1B6UyoBaaOQ9WpDxEes="
matrix:
  include:
    - os: osx
      osx_image: xcode11
      language: node_js
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
        - NODE_ENV=dev

    - os: linux
      dist: bionic
      language: node_js
      services:
        - xvfb
      env:
        - NODE_ENV=dev
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-multilib
            - g++-8
            - g++-multilib
            - icnsutils
            - graphicsmagick
            - xz-utils
            - xorriso
            - rpm

    - os: windows
      language: node_js
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
        - NODE_ENV=dev
        - YARN_GPG=no # otherwise this starts gpg-agent that never exits


before_cache:
  - rm -rf $HOME/.cache/electron-builder/wine

cache:
  yarn: true
  directories:
    - node_modules
    - $(npm config get prefix)/lib/node_modules
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder

before_install:
  - echo $TRAVIS_NODE_VERSION

install:
  - travis_wait 30 yarn --ignore-engines --network-timeout 800000;
  # Change vars for windows signing
  - export CSC_IDENTITY_AUTO_DISCOVERY=true
  # On Linux, initialize "virtual display". See before_script


before_script:
  # osx set window size
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080;
    fi
  # On Linux, create a "virtual display". This allows browsers to work properly
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99.0; fi


script:
# update the xdg implementation on the machine. older version is buggy
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cp node_modules/open/xdg-open ~/bin/;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then xdg-open --version;
    fi
  - yarn lint --quiet
  - travis_retry yarn run test-peruse --forceExit
  - travis_retry yarn run test-exts --forceExit
  # disable signging on windows for now.
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then unset CSC_LINK || unset CSC_KEY_PASSWORD; fi
  - yarn package
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/peruse.spec.ts
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/navigation.spec.ts
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/settingsMenu.spec.ts


after_failure:
# - cat ~/.local/share/applications/mimeapps.list
- which xdg-open
- xdg-open --version
# - cat $TMPDIR/safe-browser.log;
# check resolution...
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then  system_profiler SPDisplaysDataType | grep Resolution
  fi


before_deploy:
- |
  if [[ $TRAVIS_TAG == *"RC"* || $TRAVIS_TAG == *"rc"* ]]; then
    export IS_RC=yes
  fi
- if [[ "$TRAVIS_OS_NAME" != "windows" && "$IS_RC" != "yes" ]]; then NODE_ENV=prod yarn deploy; fi
- cd release;
- |
  ls . | grep safe | while read RELEASE; do
  echo "deploying ${RELEASE} to GitHub releases as tagged with ${TRAVIS_TAG}";
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ditto -c -k --sequesterRsrc --keepParent ${RELEASE} ${RELEASE}.zip;
  fi
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then zip -r -q ${RELEASE}.zip ${RELEASE};
  fi
  done
# don't fail if nothing to do.
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then zip -d *.zip *.DS_Store && zip -d *.zip  __MACOSX/\* || true;
  fi
- cd ..
- ls release
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export RELEASE_PROD_EXE="$(ls release/*-mac-x64.dmg)";
  fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export RELEASE_PROD_EXE="$(ls release/*-linux-x64.AppImage)";
  fi
- echo "deploying ${RELEASE_PROD_EXE} to GitHub releases as tagged with ${TRAVIS_TAG}"
- ls release

deploy:
  provider: releases
  skip_cleanup: true
  api_key: $GITHUB_ACCESS_TOKEN
  file: $RELEASE_PROD_EXE
  draft: true
  tag_name: $TRAVIS_TAG
  on:
    tags: true
    branch: dev
