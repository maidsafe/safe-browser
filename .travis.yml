sudo: required
dist: trusty
os:
- osx
- linux
env:
  matrix:
  - NODE_ENV=dev
  - NODE_ENV=prod
node_js:
- '8'
cache:
  yarn: true
  directories:
  - node_modules
  - app/node_modules
  - "$HOME/.electron"
  - "$HOME/.cache"
language: node_js
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-4.8
before_deploy:
- yarn build
- yarn package
- export APP_PKG_DIR="$(ls dist)";
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export CRUST_CONFIG="safe-browser.crust.config";
  else export CRUST_CONFIG="SAFE Browser.crust.config"; fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export OUTPUT_PATH=dist/$APP_PKG_DIR/;
  else export OUTPUT_PATH=dist/$APP_PKG_DIR/'SAFE Browser.app'/Contents/Resources/; fi
- echo $OUTPUT_PATH
- export TOKEN="$GITHUB_ACCESS_TOKEN"
- export OWNER="MaidSafe" REPO="release_config"
- export REPO_PATH="safe_authenticator"
- export CRUST_FILE_NAME="safe_browser.crust.config";
- export LOG_TOML_NAME="log.toml";
- export FILE_PATH="https://api.github.com/repos/$OWNER/$REPO/contents/$REPO_PATH/"
- if [[ "$NODE_ENV" == "prod" ]]; then 
  curl "$FILE_PATH$CRUST_FILE_NAME" -H "Authorization:token $TOKEN" -H "Accept:application/vnd.github.v3.raw"
  --output "$OUTPUT_PATH$CRUST_CONFIG"; fi
- curl "$FILE_PATH$LOG_TOML_NAME" -H "Authorization:token $TOKEN" -H "Accept:application/vnd.github.v3.raw" --output "$OUTPUT_PATH$LOG_TOML_NAME"
- ls dist/$APP_PKG_DIR
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then  cd dist && zip -r -q -y $APP_PKG_DIR.zip
  $APP_PKG_DIR && cd ..; fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then cd dist && ditto -c -k --sequesterRsrc
  --keepParent $APP_PKG_DIR $APP_PKG_DIR.zip  && cd ..;  fi
- ls dist
- rm -rf dist/$APP_PKG_DIR
- ls dist
- export RELEASE_DIR="$(ls dist/*.zip)";
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sha256sum dist/*.zip >> dist/$APP_PKG_DIR.txt;
  fi
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then shasum -a 256 dist/*.zip >> dist/$APP_PKG_DIR.txt;
  fi
- ls dist
- export SHA_256_SUM="$(ls dist/*.txt)";
- echo "deploying ${RELEASE_DIR} to GitHub releases as tagged with ${TRAVIS_TAG}"
deploy:
  provider: releases
  skip_cleanup: true
  api_key: $GITHUB_ACCESS_TOKEN
  file:
  - "${RELEASE_DIR}"
  - "${SHA_256_SUM}"
  draft: true
  prerelease: true
  tag_name: "$TRAVIS_TAG"
  on:
    tags: true
