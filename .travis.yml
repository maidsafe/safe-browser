env:
  global:
    - secure: "G+hQbK2+8f6XFDopDJNddw3D8pEYx8OcWS4HAPpdXWY3Uo1mOFMObQsK7PjKoVKU7+n/ScL6t1FmRPuqCaxzEZa4jztgtViyVlb04mUI331f0xnuURiSOwHNwkEXpYAOXjmA79UFkSw4BTDVH+A4cJr5wxep+Xr85wGUwRscyDMjNg4DFQHmkNYK+JluquZ2+31yDI/Rl8qgM6vOQAhf4hV72UGKNpjGknPtFqiwnf/j2Q8IT3QiUeOLaEQbgOFAQ/ad7YGt9B0vhRBkh7X3vUMrSU5JXtsZZwETpfOzE6rDUg5d+YJpwhmIlPgqg/o7hL0gyZm+mk5fY/fdWoKAoHSa2/OkMyRN0UXopg5ZDDq1NQb5Pt1a1ndgWH9tlJXRfjXaurtip+ExEamXhr+bMISqbFHyQkLHCnyC1O3LQOLbIHOv6kjNqPYLAHIE/ysagkXg6iZ9k7WOv4Rw436GoMNS1rEL0a2iacC9+X3w770QZ1mlSxYqXsswxtJLvI7kHNN+2vwJb563FJxaaaTYm66T2dYFpZhG0/o0IIM8BPTEGDit8mIBFjzZtbMP1DVRjfZhoX6zc9hXggFr8PdWBHIy6MC3dl23f84X74NnBf6RgDF6EnlQRA5D4YnB8hMHbyzwpl+Zu1ACnKfmdn7Q8QoKOC8bS9Fb/nBr7svqguo="
matrix:
  include:
    - os: osx
      osx_image: xcode11
      language: node_js
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
        - NODE_ENV=dev

    - os: linux
      language: node_js
      services:
        - xvfb
      env:
        - NODE_ENV=dev
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-multilib
            - g++-8
            - g++-multilib
            - icnsutils
            - graphicsmagick
            - xz-utils
            - xorriso
            - rpm

    - os: windows
      language: node_js
      env:
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
        - NODE_ENV=dev
        - YARN_GPG=no # otherwise this starts gpg-agent that never exits


before_cache:
  - rm -rf $HOME/.cache/electron-builder/wine

cache:
  yarn: true
  directories:
    - node_modules
    - $(npm config get prefix)/lib/node_modules
    - $HOME/.cache/electron
    - $HOME/.cache/electron-builder

before_install:
  - if [[ "$TRAVIS_OS_NAME" != "windows" ]]; then pip install --user awscli; fi;
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then choco install awscli ; fi;

install:
  - travis_wait 30 yarn --ignore-engines --network-timeout 800000;
  # On Linux, initialize "virtual display". See before_script


before_script:
  # osx set window size
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then "/Library/Application Support/VMware Tools/vmware-resolutionSet" 1920 1080;
    fi
  # On Linux, create a "virtual display". This allows browsers to work properly
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export DISPLAY=:99.0; fi


script:
# update the xdg implementation on the machine. older version is buggy
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then cp node_modules/open/xdg-open ~/bin/;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then xdg-open --version;
    fi
  - yarn lint --quiet
  - travis_retry yarn run test-peruse --forceExit
  - travis_retry yarn run test-exts --forceExit
  - yarn package
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/peruse.spec.ts
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/navigation.spec.ts
  - travis_retry yarn cross-env NODE_ENV=test TEST_CAFE=true testcafe electron:. ./__testcafe__/settingsMenu.spec.ts
  - rm -rf release
  - if [[ "$TRAVIS_OS_NAME" == "osx" && ${TRAVIS_TAG} != "" ]]; then export CSC_LINK="can be a secure hash encrypted using travis-cli"; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" && ${TRAVIS_TAG} != "" ]]; then export CSC_KEY_PASSWORD="can be a secure hash encrypted using travis-cli"; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" && ${TRAVIS_TAG} != "" ]]; then aws s3 rm --recursive s3://safe-browser/safe-browser-win/; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" && ${TRAVIS_TAG} != "" ]]; then aws s3 rm --recursive s3://safe-browser/safe-browser-linux/; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" && ${TRAVIS_TAG} != "" ]]; then aws s3 rm --recursive s3://safe-browser/safe-browser-osx/; fi



after_failure:
# - cat ~/.local/share/applications/mimeapps.list
- which xdg-open
- xdg-open --version
# - cat $TMPDIR/safe-browser.log;
# check resolution...
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then  system_profiler SPDisplaysDataType | grep Resolution
  fi


before_deploy:

- yarn release
- NODE_ENV=prod yarn package
- cd release;
- |
  ls . | grep safe | while read RELEASE; do
  echo "deploying ${RELEASE} to GitHub releases as tagged with ${TRAVIS_TAG}";
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then ditto -c -k --sequesterRsrc --keepParent ${RELEASE} ${RELEASE}.zip;
  fi
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then zip -r -q ${RELEASE}.zip ${RELEASE};
  fi
  done
# don't fail if nothing to do.
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then zip -d *.zip *.DS_Store && zip -d *.zip  __MACOSX/\* || true;
  fi
- cd ..
- ls release
- if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then export RELEASE_PROD_EXE="$(ls release/*-mac-x64.dmg)";
  fi
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then export RELEASE_PROD_EXE="$(ls release/*-linux-x64.AppImage)";
  fi
- if [[ "$TRAVIS_OS_NAME" == "win" ]]; then export RELEASE_PROD_EXE="$(ls release/*-win-x64.exe)";
  fi
- echo "deploying ${RELEASE_PROD_EXE} to GitHub releases as tagged with ${TRAVIS_TAG}"
- ls release

deploy:
  provider: releases
  skip_cleanup: true
  api_key: $GITHUB_ACCESS_TOKEN
  file:
    - "${RELEASE_PROD_EXE}"
  draft: true
  tag_name: $TRAVIS_TAG
  on:
    tags: true
    branch: dev
